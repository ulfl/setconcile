%% Determine our Erlang node name.
[Node1, _Host] = string:tokens(atom_to_list(node()), "@"),
Node = erlang:list_to_atom(Node1),

NodeA = "52.18.165.197",
NodeB = "54.175.148.223",
DbIp = "127.0.0.1",

%% Determine our node config based on the Erlang node name.
NodeCfg = case Node of
            a -> #{port => 7363, remote_host => NodeB,
                   remote_port => 7363, name => a};

            b -> #{port => 7363, remote_host => NodeA,
                   remote_port => 7363, name => b}
          end,

%% Determine the sync schedule.
Schedule = case Node of
            a -> false; %% {daily, [{10, 00, am}, {10, 00, pm}]};
            b -> false
          end,

Seconds = fun(X) -> X * 1000 end,
Minutes = fun(X) -> X * Seconds(60) end,

Resolver = fun(V1, V2) -> max(V1, V2) end,

Converged = fun(Its, TxCnt, RxCnt) ->
                (Its > 100) or ((TxCnt + RxCnt) =:= 0) end,

#{
   node => NodeCfg,

   datasets => #{
     mini => #{
       dataset                 => ds_local:new(mini, dsdl_mini:new(Node)),
       tmo_prep                => Seconds(10),
       tmo_get_bloom           => Seconds(10),
       tmo_transfer_elements   => Seconds(10),
       tmo_unprep              => Seconds(10),
       max_transfer_bundle     => 100,
       converged               => Converged,
       bloom_false_probability => 0.5
      },

     symm => #{
       dataset                 => ds_local:new(symm,
                                               dsdl_symm:new(Node, 100000, 0.2,
                                                             1024)),
       tmo_prep                => Minutes(30),
       tmo_get_bloom           => Minutes(30),
       tmo_transfer_elements   => Minutes(30),
       tmo_unprep              => Minutes(30),
       max_transfer_bundle     => 100,
       converged               => Converged,
       bloom_false_probability => 0.5
      },

     riak_mini => #{
       dataset                 => ds_local:new(riak_mini,
                                               dsdl_riak:new(DbIp, <<"mini">>,
                                                             Resolver)),
       tmo_prep                => Minutes(30),
       tmo_get_bloom           => Minutes(30),
       tmo_transfer_elements   => Minutes(30),
       tmo_unprep              => Minutes(30),
       max_transfer_bundle     => 100,
       converged               => Converged,
       bloom_false_probability => 0.5
      },

     riak_set_a => #{
       dataset                 => ds_local:new(riak_set_a,
                                               dsdl_riak:new(DbIp, <<"set_a">>,
                                                             Resolver)),
       schedule                => Schedule,
       tmo_prep                => Minutes(60),
       tmo_get_bloom           => Minutes(30),
       tmo_transfer_elements   => Minutes(30),
       tmo_unprep              => Minutes(30),
       max_transfer_bundle     => 100,
       converged               => Converged,
       bloom_false_probability => 0.5
      }
    }
 }.
